#version 330 core

in vec3 Normal;
in vec3 FragPos;
in vec2 myTex;
in vec4 ProjTexCoord;

out vec4 color;

struct Material {
  sampler2D diffuse;
  sampler2D specular;
  sampler2D spotlight;
  sampler2D projectorTex;

  float shininess;
};

struct Light {
  vec3 position;
  vec3 direction;
  float cutOff;
  float outerCutOff;

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;

  float constant;
  float linear;
  float quadratic;
};

uniform vec3 viewPos;
uniform Material material;
uniform Light light;

void main(){
  vec3 lightDir = normalize(light.position - FragPos);

  vec3 ambient = light.ambient * vec3(texture(material.diffuse, myTex));

  vec3 norm = normalize(Normal);
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, myTex));

  vec3 viewDir = normalize(viewPos - FragPos);
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * spec * vec3(texture(material.specular, myTex));

  vec4 projTexColor = vec4(0.0);
  projTexColor = textureProj(material.projectorTex, ProjTexCoord);

  float theta = dot(lightDir, normalize(-light.direction));
  float epsilon = (light.cutOff - light.outerCutOff);
  float intensity = clamp((theta - light.outerCutOff)/epsilon, 0.0, 1.0);

  //diffuse *= intensity;
  specular *= intensity;
  projTexColor *= intensity;

  float distance    = length(light.position - FragPos);
  float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

  diffuse   *= attenuation;
  specular *= attenuation;
  projTexColor *= attenuation;



  color = vec4(ambient + diffuse + specular, 1.0) + projTexColor * 0.5;
}


